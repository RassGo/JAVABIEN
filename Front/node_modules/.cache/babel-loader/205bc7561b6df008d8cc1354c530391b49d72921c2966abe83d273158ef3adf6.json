{"ast":null,"code":"//TO DO .env\nconst API_BASE_URL = 'http://localhost:8080/users';\nexport const getAllUsers = async () => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const users = await response.json();\n    return users;\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n    throw error;\n  }\n};\nexport const getUserById = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const user = await response.json();\n    return user;\n  } catch (error) {\n    console.error(`Failed to fetch user with ID ${id}:`, error);\n    throw error;\n  }\n};\nexport const getUserByEmail = async email => {\n  const response = await fetch(`${API_URL}?email=${email}`);\n  if (!response.ok) {\n    throw new Error('User not found');\n  }\n  return response.json();\n};\nexport const createUser = async userData => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const newUser = await response.json();\n    return newUser;\n  } catch (error) {\n    console.error('Failed to create user:', error);\n    throw error;\n  }\n};\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const updatedUser = await response.json();\n    return updatedUser;\n  } catch (error) {\n    console.error(`Failed to update user with ID ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteUser = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    return 'User deleted successfully!';\n  } catch (error) {\n    console.error(`Failed to delete user with ID ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getAllUsers","response","fetch","method","headers","ok","Error","statusText","users","json","error","console","getUserById","id","user","getUserByEmail","email","API_URL","createUser","userData","body","JSON","stringify","newUser","updateUser","updatedUser","deleteUser"],"sources":["/Users/pierrebrun/Documents/Projet/JAVA/JAVABIEN/Front/src/services/userService.js"],"sourcesContent":["//TO DO .env\nconst API_BASE_URL = 'http://localhost:8080/users';\n\nexport const getAllUsers = async () => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const users = await response.json();\n    return users;\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n    throw error;\n  }\n};\n\nexport const getUserById = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const user = await response.json();\n    return user;\n  } catch (error) {\n    console.error(`Failed to fetch user with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const getUserByEmail = async (email) => {\n  const response = await fetch(`${API_URL}?email=${email}`);\n  if (!response.ok) {\n    throw new Error('User not found');\n  }\n  return response.json();\n};\n\n\nexport const createUser = async (userData) => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const newUser = await response.json();\n    return newUser;\n  } catch (error) {\n    console.error('Failed to create user:', error);\n    throw error;\n  }\n};\n\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const updatedUser = await response.json();\n    return updatedUser;\n  } catch (error) {\n    console.error(`Failed to update user with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const deleteUser = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    return 'User deleted successfully!';\n  } catch (error) {\n    console.error(`Failed to delete user with ID ${id}:`, error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}