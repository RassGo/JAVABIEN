{"ast":null,"code":"//TO DO .env\nconst API_BASE_URL='http://localhost:8080/users';export const getAllUsers=async()=>{try{const response=await fetch(API_BASE_URL,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`Error: ${response.statusText}`);}const users=await response.json();return users;}catch(error){console.error('Failed to fetch users:',error);throw error;}};export const getUserById=async id=>{try{const response=await fetch(`${API_BASE_URL}/${id}`,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`Error: ${response.statusText}`);}const user=await response.json();return user;}catch(error){console.error(`Failed to fetch user with ID ${id}:`,error);throw error;}};export const createUser=async userData=>{try{const response=await fetch(API_BASE_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){throw new Error(`Error: ${response.statusText}`);}const newUser=await response.json();return newUser;}catch(error){console.error('Failed to create user:',error);throw error;}};export const updateUser=async(id,userData)=>{try{const response=await fetch(`${API_BASE_URL}/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){throw new Error(`Error: ${response.statusText}`);}const updatedUser=await response.json();return updatedUser;}catch(error){console.error(`Failed to update user with ID ${id}:`,error);throw error;}};export const deleteUser=async id=>{try{const response=await fetch(`${API_BASE_URL}/${id}`,{method:'DELETE',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`Error: ${response.statusText}`);}return'User deleted successfully!';}catch(error){console.error(`Failed to delete user with ID ${id}:`,error);throw error;}};","map":{"version":3,"names":["API_BASE_URL","getAllUsers","response","fetch","method","headers","ok","Error","statusText","users","json","error","console","getUserById","id","user","createUser","userData","body","JSON","stringify","newUser","updateUser","updatedUser","deleteUser"],"sources":["/Users/pierrebrun/Documents/Projet/JAVA/JAVABIEN/Front/src/services/userService.js"],"sourcesContent":["//TO DO .env\nconst API_BASE_URL = 'http://localhost:8080/users';\n\nexport const getAllUsers = async () => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const users = await response.json();\n    return users;\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n    throw error;\n  }\n};\n\nexport const getUserById = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const user = await response.json();\n    return user;\n  } catch (error) {\n    console.error(`Failed to fetch user with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const createUser = async (userData) => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const newUser = await response.json();\n    return newUser;\n  } catch (error) {\n    console.error('Failed to create user:', error);\n    throw error;\n  }\n};\n\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const updatedUser = await response.json();\n    return updatedUser;\n  } catch (error) {\n    console.error(`Failed to update user with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport const deleteUser = async (id) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    return 'User deleted successfully!';\n  } catch (error) {\n    console.error(`Failed to delete user with ID ${id}:`, error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}